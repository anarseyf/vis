{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/algorithms/algorithms.component.css","webpack:///./src/app/algorithms/algorithms.component.html","webpack:///./src/app/algorithms/algorithms.component.ts","webpack:///./src/app/algorithms/dijkstra.service.ts","webpack:///./src/app/algorithms/graph.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n.button {\\n    display: inline-block;\\n    padding: 10px;\\n    margin: 10px;\\n    font-size: 1.2em;\\n    cursor: pointer;\\n    border: 1px solid lightgray;\\n    border-radius: 4px;\\n}\\n.button:hover {\\n    color: dodgerblue;\\n}\\nsvg {\\n    border: 1px solid lightgray;\\n}\\ncircle {\\n    stroke: gray;\\n    stroke-width: 2px;\\n}\"","module.exports = \"<div>\\n    <span class=\\\"button\\\" (click)=\\\"reset()\\\">reset</span>\\n</div>\\n\\n<svg id=\\\"svg\\\"\\n    [attr.width]=\\\"width\\\"\\n    [attr.height]=\\\"height\\\">\\n\\n</svg>\\n\"","import {AfterContentInit, Component, OnInit} from '@angular/core';\nimport * as d3 from \"d3\";\nimport { Node, Edge, Graph } from \"./graph\";\nimport { DijkstraService } from \"./dijkstra.service\";\n\n@Component({\n    selector: 'app-algorithms',\n    templateUrl: './algorithms.component.html',\n    styleUrls: ['./algorithms.component.css']\n})\n\nexport class AlgorithmsComponent implements OnInit, AfterContentInit {\n\n    graph: Graph;\n    nodeCount: number = 40;\n    width: number = 600;\n    height: number = 400;\n    circleRadius: number = 6;\n    delay: number = 100;\n\n    constructor(private dijkstraService : DijkstraService) {\n        this.reset();\n    }\n\n    reset() {\n        this.resetSVG();\n\n        let margin = this.circleRadius * 4;\n        let nodes = new Array(this.nodeCount)\n            .fill(0)\n            .map((v, i) => {\n                return new Node(this.randomNumber(this.width - margin) + margin/2,\n                    this.randomNumber(this.height - margin) + margin/2,\n                    `${i}`);\n            })\n            .sort((a, b) => a.x - b.x);\n        this.graph = new Graph(nodes);\n\n        this.addRandomEdges();\n        this.drawGraph(this.graph);\n\n        let [ source, target ] = this.getRandomStartEndNodes();\n        source.special = target.special = true;\n\n        let doneCallback = ((path: Node[]) => {\n            this.visitPath(path, this.graph);\n        });\n        this.runDijkstra(this.graph, source, target, doneCallback);\n    }\n\n    executeAfterDelay(delay, iterator, callback) {\n        setTimeout(function () {\n            let result = iterator.next();\n            callback(result);\n            if (!result.done) {\n                this.executeAfterDelay(delay, iterator, callback);\n            }\n        }.bind(this), delay);\n    }\n\n    ngOnInit() {\n    }\n\n    ngAfterContentInit() {\n    }\n\n    randomNumber(max: number) {\n        return Math.round(Math.random() * max);\n    }\n\n    addRandomEdges() {\n        const maxEdges = this.nodeCount * 10;\n        const edgeCount = this.randomNumber(maxEdges);\n\n        let max = this.graph.nodes.size - 1;\n        for (let i = 0; i < edgeCount; i++) {\n            let i1 = this.randomNumber(max),\n                i2 = this.randomNumber(max);\n            let nodes = Array.from(this.graph.nodes);\n            let edge = new Edge(nodes[i1], nodes[i2]);\n            this.graph.addEdge(edge);\n        }\n    }\n\n    getRandomStartEndNodes() {\n        let nodes = [...this.graph.nodes];\n        let source = nodes[0];\n        let target = nodes[nodes.length - 1];\n        return [source, target];\n    }\n\n    runDijkstra(graph: Graph, source: Node, target: Node, doneCallback: ((_: Node[]) => void)) {\n\n        let iterator = this.dijkstraService.shortestPath(graph, source, target);\n\n        let callback = function (result) {\n            if (result.done) {\n\n                // TODO - promises!\n\n                let path = result.value;\n                console.log(`Done: Path ${ source } -> ${ target }:\\n\\t${ path.join(\"\\n\\t\") }`);\n                doneCallback(path);\n            }\n        }.bind(this);\n\n        this.executeAfterDelay(0, iterator, callback);\n    }\n\n    visitPath(path: Node[], graph: Graph) {\n\n        this.drawGraph(graph);\n\n        let iterator = function*() {\n            for (let i = 0; i < path.length - 1; i++) {\n                let from = path[i], to = path[i + 1];\n                graph.visit(from, to);\n                yield;\n            }\n        }();\n\n        let callback = function (result) {\n            this.drawGraph(graph);\n        }.bind(this);\n\n        this.executeAfterDelay(500, iterator, callback);\n    }\n\n    resetSVG() {\n        d3.select(\"#svg\").html(\"\");\n    }\n\n    drawGraph(graph: Graph) {\n        this.drawEdges(graph);\n        this.drawNodes(graph);\n    }\n\n    drawNodes(graph: Graph) {\n        let radius = this.circleRadius;\n        let nodes = Array.from(graph.nodes);\n        let svg = d3.select(\"#svg\");\n\n        let circles = svg.selectAll(\"circle\")\n            .data(nodes);\n\n        circles\n            .attr(\"stroke-width\", function (d: Node) {\n                return d.special ? 2 : 1;\n            })\n            .attr(\"fill\", function (d: Node) {\n                return d.special ? \"red\" : (d.visited ? 'darkgray' : 'lightgray');\n            });\n\n        circles.enter()\n            .append(\"circle\")\n            .attr(\"cx\", function (d) {\n                return d.x;\n            })\n            .attr(\"cy\", function (d) {\n                return d.y;\n            })\n            .attr(\"r\", this.circleRadius)\n            .attr(\"stroke\", \"gray\");\n\n        circles.exit().remove();\n\n        // circlesEnter\n        //     .append(\"text\")\n        //     .attr(\"x\", function (d) {\n        //         return d.x + radius;\n        //     })\n        //     .attr(\"y\", function (d) {\n        //         return d.y + radius;\n        //     })\n        //     .text(function (d: Node) {\n        //         return d.name;\n        //     });\n    }\n\n    drawEdges(graph: Graph) {\n        let edges = graph.edges;\n        let svg = d3.select(\"#svg\");\n\n        let lines = svg.selectAll(\"line\")\n            .data(edges);\n\n        lines\n            .attr(\"stroke\", function(d: Edge) {\n                return d.visited ? 'darkgray' : 'lightgray';\n            })\n            .attr(\"stroke-width\", function(d: Edge) {\n                return d.visited ? 3 : 1;\n            });\n\n        lines.enter()\n            .append(\"line\")\n            .attr(\"x1\", function (edge: Edge) { return edge.node1.x; })\n            .attr(\"x2\", function (edge: Edge) { return edge.node2.x; })\n            .attr(\"y1\", function (edge: Edge) { return edge.node1.y; })\n            .attr(\"y2\", function (edge: Edge) { return edge.node2.y; });\n\n        lines.exit().remove();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Graph, Node, Edge } from './graph';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DijkstraService {\n\n    constructor() { }\n\n    * shortestPath(graph: Graph, source: Node, target: Node) {\n\n        let q = new PriorityQueue();\n        let dist: Map<Node, number> = new Map();\n        let prev: Map<Node, Node> = new Map();\n\n        let nodes = graph.nodes;\n        nodes.forEach(node => {\n            dist.set(node, node == source ? 0 : Infinity);\n            prev.set(node, null);\n        });\n\n        q.addWithPriority(source, dist.get(source));\n\n        while (!q.isEmpty()) {// && q.smallestDistance < Infinity) {\n            let u = q.remove();\n            for (let v of u.neighbors()) {\n                let edge = u.edges.get(v);\n                let distance = dist.get(u) + edge.distance;\n                if (distance < dist.get(v)) {\n                    dist.set(v, distance);\n                    prev.set(v, u);\n                    q.addWithPriority(v, distance);\n                }\n            }\n            // console.log(`${q}`);\n            yield;\n        }\n\n        console.log(`FINAL QUEUE: ${q}`);\n\n        let result: Node[] = [];\n        if (dist.get(target) < Infinity) {\n            let node = target;\n            while (node != null) {\n                result.push(node);\n                node = prev.get(node);\n            }\n        }\n\n        return result;\n    }\n}\n\nexport class QueueNode {\n    node: Node;\n    priority: number;\n    constructor(node: Node, priority: number) {\n        this.node = node;\n        this.priority = priority;\n    }\n    toString() {\n        return `${this.node.name} (${this.priority})`;\n    }\n}\n\nexport class PriorityQueue {\n    private queue: QueueNode[];\n\n    constructor() {\n        this.queue = [];\n    }\n\n    addWithPriority(node: Node, priority: number) {\n\n        this.removeIfPresent(node);\n\n        let index = 0;\n        let q = this.queue;\n        while (index < q.length) {\n            let qnode = q[index];\n            if (qnode.priority >= priority) {\n                break;\n            }\n            index++;\n        }\n        let qnode = new QueueNode(node, priority);\n        this.queue = [...q.slice(0, index), qnode, ...q.slice(index, q.length)];\n\n        // console.log(`Added: ${ node }`);\n    }\n\n    private removeIfPresent(node: Node) {\n        let q = this.queue;\n        let index = q.map(qn => qn.node).indexOf(node);\n        if (index != -1) {\n            this.queue = [...q.slice(0, index), ...q.slice(index + 1, q.length)];\n            // console.log(`Removed: ${ node }`);\n        }\n    }\n\n    remove() : Node {\n        let qn = this.queue.shift();\n        return qn.node;\n    }\n\n    get smallestDistance() : number {\n        return (this.queue.length ? this.queue[0].priority : Infinity);\n    }\n\n    isEmpty() {\n        return this.queue.length == 0;\n    }\n\n    toString() {\n        let queueStr = this.queue.join(\"; \");\n        return `Queue (size: ${ this.queue.length }):\\n\\t${ queueStr }`;\n    }\n}\n","export class Node {\n    x: number;\n    y: number;\n    name: string;\n    visited: boolean;\n    special: boolean;\n    edges: Map<Node, Edge>;\n\n    constructor(x: number, y: number, name = \"Node\") {\n        this.x = x;\n        this.y = y;\n        this.name = name;\n        this.edges = new Map();\n        this.visited = false;\n        this.special = false;\n    }\n    addEdge(edge: Edge) {\n        const neighbor = (edge.node1 == this ? edge.node2 : edge.node1);\n        this.edges.set(neighbor, edge);\n    }\n    neighbors() : Set<Node> {\n        return new Set(this.edges.keys());\n    }\n    hasNeighbor(node: Node) {\n        return this.edges.has(node);\n    }\n    toString() {\n        let neighborsStr = [...this.neighbors().values()].map(n => n.name).join(\", \");\n        return `${this.name} (v: ${this.visited}, n: ${neighborsStr})`;\n    }\n}\n\nexport class Edge {\n    node1: Node;\n    node2: Node;\n    visited: boolean;\n\n    constructor(node1: Node, node2: Node) {\n        if (!node1 || !node2) {\n            throw(`Invalid Edge constructor arguments`);\n        }\n        this.node1 = node1;\n        this.node2 = node2;\n        this.visited = false;\n    }\n\n    get distance() {\n        const dx2 = Math.pow(this.node1.x - this.node2.x, 2),\n            dy2 = Math.pow(this.node1.y - this.node2.y, 2),\n            distance = Math.sqrt(dx2 + dy2);\n        return Math.round(distance * 100) / 100;\n    }\n\n    toString() {\n        return `Edge (${this.node1.name} <-> ${this.node2.name}, v: ${this.visited}, d: ${this.distance})`;\n    }\n}\n\nexport class Graph {\n    nodes: Set<Node>;\n    edges: Edge[];\n    name: string;\n\n    constructor(nodes: Node[], edges: Edge[] = [], name = \"Graph\") {\n        this.name = name;\n        this.nodes = new Set(nodes);\n        this.edges = [];\n        edges.forEach(e => this.addEdge(e));\n    }\n\n    addEdge(edge: Edge) {\n        if (!this.nodes.has(edge.node1) || !this.nodes.has(edge.node2)) {\n            throw(`Ignoring unrecognized node: ${edge}`);\n        }\n        if (!edge.node1 || !edge.node2 || edge.node1 == edge.node2) {\n            console.warn(`Ignoring invalid edge: ${edge}.`);\n            return;\n        }\n        if (edge.node1.hasNeighbor(edge.node2)) {\n            console.warn(`Ignoring already-existing edge: ${edge}`);\n            return;\n        }\n\n        this.edges.push(edge);\n        edge.node1.addEdge(edge);\n        edge.node2.addEdge(edge);\n    }\n\n    visit(from: Node, to: Node) : boolean {\n\n        console.log(`Visiting ${from} -> ${to}`);\n\n        let edge = from.edges.get(to);\n        if (!edge) {\n            console.warn(`Nodes are not neighbors: ${from}, ${to}`);\n            return false;\n        }\n\n        from.visited = to.visited = edge.visited = true;\n        return true;\n    }\n\n    toString() {\n        const nodesStr = Array.from(this.nodes).join(\"\\n\\t\");\n        // const edgesStr = this.edges.join(\"\\n\\t\");\n\n        return `Graph:\\n\\t${nodesStr}`;\n    }\n}","module.exports = \"\"","module.exports = \"<div style=\\\"text-align:center\\\">\\n  <h1>{{ title }}</h1>\\n\\n  <nav>\\n    <a routerLink=\\\"/algorithms\\\">Algorithms</a>\\n  </nav>\\n\\n  <router-outlet></router-outlet>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n    title = 'vis';\n\n    constructor(private router: Router) {}\n\n    ngOnInit() {\n        this.router.navigateByUrl(\"/algorithms\");\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { AlgorithmsComponent } from './algorithms/algorithms.component';\n\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [{\n    path: \"algorithms\",\n    component: AlgorithmsComponent\n}];\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        AlgorithmsComponent\n    ],\n    imports: [\n        BrowserModule,\n        RouterModule.forRoot(routes, {})\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}